#ifndef omega_scanner_h
#define omega_scanner_h

typedef enum {
  // single-character tokens
  TOKEN_LEFT_PAREN, TOKEN_RIGHT_PAREN,
  TOKEN_LEFT_BRACE, TOKEN_RIGHT_BRACE,
  TOKEN_LEFT_BRACKET, TOKEN_RIGHT_BRACKET,
  TOKEN_COMMA, TOKEN_DOT, TOKEN_COLON, TOKEN_MINUS, TOKEN_PLUS,
  TOKEN_SEMICOLON, TOKEN_SLASH, TOKEN_STAR,
  TOKEN_AT, TOKEN_MODULO,

  // one or two character tokens
  TOKEN_BANG, TOKEN_BANG_EQUAL,
  TOKEN_EQUAL, TOKEN_EQUAL_EQUAL,
  TOKEN_GREATER, TOKEN_GREATER_EQUAL,
  TOKEN_LESS, TOKEN_LESS_EQUAL,

  // bitwise
  TOKEN_BITWISE_AND, TOKEN_BITWISE_OR,
  TOKEN_BITWISE_XOR, TOKEN_BITWISE_NOT,
  TOKEN_BITWISE_LS, TOKEN_BITWISE_RS,

  // literals
  TOKEN_IDENTIFIER, TOKEN_STRING, TOKEN_NUMBER,

  // keywords
  TOKEN_AND, TOKEN_CLASS, TOKEN_ELSE, TOKEN_FALSE,
  TOKEN_FOR, TOKEN_FN, TOKEN_IF, TOKEN_NIL, TOKEN_OR,
  TOKEN_OUT, TOKEN_RETURN, TOKEN_SUPER, TOKEN_THIS,
  TOKEN_TRUE, TOKEN_VAR, TOKEN_WHILE, TOKEN_IMPORT,

  // special tokens
  TOKEN_ERROR, TOKEN_EOF
} TokenType;
typedef struct {
  TokenType type;
  const char* start;
  int length;
  int line;
} Token;

void initScanner(const char* source);
Token scanToken();

#endif
